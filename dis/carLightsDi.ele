var abstract sig Lights {}

-- distinguish between left/right
var abstract sig TurnSignal extends Lights {}
var one abstract sig LeftTurnSignal extends TurnSignal {}
var one abstract sig RightTurnSignal extends TurnSignal {}
var lone sig LeftTurnSignalOn extends LeftTurnSignal {}
var lone sig RightTurnSignalOn extends RightTurnSignal {}
var lone sig LeftTurnSignalOff extends LeftTurnSignal {}
var lone sig RightTurnSignalOff extends RightTurnSignal {}

var one abstract sig EmergencyBreakLight extends Lights {}
var lone sig EmergencyBreakLightOn extends EmergencyBreakLight {}
var lone sig EmergencyBreakLightOff extends EmergencyBreakLight {}

var one abstract sig AdaptiveHighBeam extends Lights {}
var lone sig AdaptiveHighBeamOn extends AdaptiveHighBeam {}
var lone sig AdaptiveHighBeamOff extends AdaptiveHighBeam {}

var one abstract sig LowBeamHeadlights extends Lights {}
var lone sig LowBeamHeadlightsOn extends LowBeamHeadlights {}
var lone sig LowBeamHeadlightsOff extends LowBeamHeadlights {}

var one abstract sig CorneringLights extends Lights {}
var lone sig CorneringLightsOn extends CorneringLights {}
var lone sig CorneringLightsOff extends CorneringLights {}


pred unturn[on, off : TurnSignal] {
  no off
  one on

  one off'
  no on'

  (Lights - (on+off))' = (Lights - (on+off))
}

pred turn[on, off : TurnSignal] {
  no on
  one off

  one on'
  no off'

  (Lights - (on+off))' = (Lights - (on+off))
}

pred turn_left[] {
 turn[LeftTurnSignalOn, LeftTurnSignalOff]
}
pred unturn_left[] {
 unturn[LeftTurnSignalOn, LeftTurnSignalOff]
}
pred turn_right[] {
 turn[RightTurnSignalOn, RightTurnSignalOff]
}
pred unturn_right[] {
 unturn[RightTurnSignalOn, RightTurnSignalOff]
}

pred piscas_piscas[] {
 turn_left or unturn_left or
 turn_right or unturn_right
}


fact init {
  no RightTurnSignalOn
  no LeftTurnSignalOn
  no LowBeamHeadlightsOn
  no EmergencyBreakLightOn
  no AdaptiveHighBeamOn
  no CorneringLightsOn
}

pred do_nothing[] {
	Lights' = Lights
}

fact transitions {
  always (
   piscas_piscas or do_nothing
  )
}



run { } for 50
