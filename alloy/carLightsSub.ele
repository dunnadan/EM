-- this ended up being "useful" for the model (theme) alone
-- we didn't quite understand the "main functions" and their role
abstract sig Signal {}
one sig TurnSignal extends Signal {}
one sig EmergencyBreakLight extends Signal {}	
one sig AdaptiveHighBeam extends Signal {}
one sig LowBeamHeadLights extends Signal {}
one sig CorneringLights extends Signal {}
one sig BlinkerLights extends Signal {}
one sig ReverseLights extends Signal {}
one sig HighBeamHeadLights extends Signal {}

-- done this way instead of lone sing xSignal extends Signal {}
-- to appear the same name in the model (theme)
-- same expressive power, better visual mode, little extra boilerplate
var sig On in Signal {} 
var sig Off in Signal {}
fact oneModeSignal { 
	always (
 		Signal = On + Off and
		no On & Off
	)
}

-- useful for the model (theme)
one sig Signals {
	var signals: set On
}
----------------------------------------------------------------------------------------------------

-- the all types of lights
abstract sig Light {}
one sig Blinker extends Light {}
one sig LowBeamHeadLight extends Light {}
one sig HalfLowBeamHeadLight extends Light {}
one sig HighBeamHeadLight extends Light {}
one sig CorneringLight extends Light {}
one sig BrakeLight extends Light {}
one sig TailLight extends Light {}
one sig ReverseLight extends Light {}
one sig AmbientLight extends Light {}

abstract sig Gear {}
one sig ReverseGear extends Gear {}
one sig ForwardGear extends Gear {}

-- sine we aren't sure how much we would model
-- and how important the zones were we have decided to take
-- this route, all done it was a bit cubersome with the frame conditions
-- but offered a decent level of abstraction
one sig Car {
	var frontRight: set Light,
	var frontLeft: set Light,
	var middleLeft: lone Light,
	var middleRight: lone Light,
	var backRight: set Light,
	var backLeft: set Light,
	var top: lone BrakeLight,
	var gear: lone Gear
}

-- since we cant specify this with "types" alone
fact notAllowedInFront {
	let front = Car.frontRight + Car.frontLeft {
		always (
			BrakeLight not in front and
			TailLight not in front and
			ReverseLight not in front
		)
	}
}

fact notAllowedInMiddle {
	let middle = Car.middleRight + Car.middleLeft {
		always (
			LowBeamHeadLight not in middle and
			HighBeamHeadLight not in middle and
			CorneringLight not in middle and
			BrakeLight not in middle and
			TailLight not in middle and
			ReverseLight not in middle
		)
	}
}

fact notAllowedInBack {
	let back = Car.backRight + Car.backLeft {
		always (
			LowBeamHeadLight not in back and
			HighBeamHeadLight not in back and
			CorneringLight not in back
		)
	}
}


fact alwaysBlinkAllLights {
	always (
		Blinker in (Car.frontRight + Car.middleRight + Car.backRight)
				implies Blinker in Car.frontRight and
						Blinker in Car.middleRight and
						Blinker in Car.backRight
	)
	always (
		Blinker in (Car.frontLeft + Car.middleLeft + Car.backLeft)
				implies Blinker in Car.frontLeft and
						Blinker in Car.middleLeft and
						Blinker in Car.backLeft
	)
}

-- since we have the 'alwaysBlinkAllLights' fact we can be lazy here
fact onlyOneBlinker {
	always (
		Blinker in Car.middleRight implies Blinker not in Car.middleLeft
	)
	always (
		Blinker in Car.middleLeft implies Blinker not in Car.middleRight
	)
}


fact alwaysBreakeAllBackLights {
	always (
		BrakeLight in (Car.backRight + Car.backLeft)
				implies BrakeLight in Car.backRight and
						BrakeLight in Car.backLeft
	)
}
----------------------------------------------------------------------------------------------------

-- this sig aggregates all input from the driver
one sig Input {
	var key: one Key,
	var pitmanArm: one PitmanArm,
	var lightRotarySwitch: one LightRotarySwitch,
	var ambientLightButton: one AmbientLightButton,
	var driver: one Driver,
	var wheel: one SteeringWheel 
}

abstract sig PitmanArm {
 -- 5ยบ/7ยบ could be done with a relation here
 -- but some since ยบ doesn't matter for left and right
 -- that would allow to represent "impossible" states
 -- hence this solution
}

--Definition of all possible options for the Pitman Arm position
one sig PitmanArmNeutral extends PitmanArm {}
one sig PitmanArmUp5 extends PitmanArm {}
one sig PitmanArmUp7 extends PitmanArm {}
one sig PitmanArmDown5 extends PitmanArm {}
one sig PitmanArmDown7 extends PitmanArm {}
one sig PitmanArmForward extends PitmanArm {}
one sig PitmanArmBackward extends PitmanArm {}

--Possible Key states, important to notice that here we used the position KeyInIgnitionOnPosition
--to determine if the Car engine is On when the key is on this position
abstract sig Key {}
one sig NoKeyInserted extends Key {}
one sig KeyInserted extends Key {}
one sig KeyInIgnitionOnPosition extends Key {}


abstract sig LightRotarySwitch {}
one sig LightSwitchOff extends LightRotarySwitch {}
one sig LightSwitchOn extends LightRotarySwitch {} 
one sig LightSwitchAuto extends LightRotarySwitch {} 


abstract sig AmbientLightButton {}
one sig AmbientLightButtonOn extends AmbientLightButton{}
one sig AmbientLightButtonOff extends AmbientLightButton{}

abstract sig Driver {}
one sig DriverInside extends Driver {}
one sig DriverOutside extends Driver {}

abstract sig SteeringWheel {}
one sig SteeringWheelNeutral extends SteeringWheel {}
one sig SteeringWheelLeft extends SteeringWheel {}
one sig SteeringWheelRight extends SteeringWheel {}
 
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
--Activate temporary right blinking, when Pitman Arm is 5 degrees Up
pred tmpRightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside
	Input.pitmanArm != PitmanArmUp5

	Input.pitmanArm' = PitmanArmUp5
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Blinker not in Car.frontRight'' 
	Blinker not in Car.middleRight''
	Blinker not in Car.backRight''
	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
     
}
--Stop the temporary Right blinking
pred stopTmpRightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside
	Input.pitmanArm = PitmanArmUp5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontRight' = Car.frontRight - Blinker
	Car.middleRight' = Car.middleRight - Blinker
	Car.backRight' = Car.backRight - Blinker
	Off' = Off + BlinkerLights
	On' = On - BlinkerLights
	Signals.signals' = On'

	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}
--Activate engaging right blinking
pred rightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmUp7
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
     
}
--Activate temporary left Blinking, when Pitman Arm is 5 degrees Down
pred tmpLeftBlinking {
	Input.pitmanArm != PitmanArmDown5
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmDown5
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Blinker not in Car.frontLeft'' 
	Blinker not in Car.middleLeft''
	Blinker not in Car.backLeft''
	

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}
--Stop temporary left blinking
pred stopTmpLeftBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside
	Input.pitmanArm = PitmanArmDown5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontLeft' = Car.frontLeft - Blinker
	Car.middleLeft' = Car.middleLeft - Blinker
	Car.backLeft' = Car.backLeft - Blinker
	Off' = Off + BlinkerLights
	On' = On - BlinkerLights
	Signals.signals' = On'

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}
-- Activate engaging left blinking
pred leftBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmDown7
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
     
}
-- Turn the Light Rotary Switch to the ON position
pred lightOn {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchOn

	Input.lightRotarySwitch' = LightSwitchOn
	
	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Turn the Light Rotary Switch to the OFF position
pred lightOff {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchOff

	Input.lightRotarySwitch' = LightSwitchOff

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Turn the Light Rotary Switch to the AUTO position
pred lightAuto {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchAuto

	Input.lightRotarySwitch' = LightSwitchAuto

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Turn the Ambient Light Button ON
pred ambientLightOn {
	Input.driver = DriverInside
	Input.ambientLightButton = AmbientLightButtonOff

	Input.ambientLightButton' = AmbientLightButtonOn

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Turn the Ambient Light Button OFF
pred ambientLightOff {
	Input.driver = DriverInside
	Input.ambientLightButton = AmbientLightButtonOn

	Input.ambientLightButton' = AmbientLightButtonOff

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--This predicate simulates the driver entering the car
pred enterCar {
	Input.driver = DriverOutside
	
     Input.key' = KeyInserted
	Input.driver' = DriverInside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')
	
	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--This predicate simulates the driver getting out of the car
pred leaveCar {
	Input.driver = DriverInside
     
	Input.key' = KeyInserted
	Input.driver' = DriverOutside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')


	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

-- Turn on the Ambient Lights, only when the driver is out of the car and the Button is ON
pred activateAmbientLight {
	--pre
	Input.key = KeyInserted
	Input.ambientLightButton = AmbientLightButtonOn
	Input.driver = DriverOutside
	AmbientLight not in Car.middleRight
	
	--post
	Car.frontLeft' = AmbientLight
	Car.frontRight' = AmbientLight
	Car.middleLeft' = AmbientLight
	Car.middleRight' = AmbientLight
	Car.backLeft' = AmbientLight
	Car.backRight' = AmbientLight


	--frame
	On' = On
	Off' = Off
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.key' = Input.key
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.driver' = Input.driver
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Key is inserted
pred insertKey {
	Input.driver = DriverInside
	Input.key = NoKeyInserted
	
	Input.key' = KeyInserted

 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

--Rotate key, from KeyInserted to KeyInIgnitionOnPosition
pred rotateKey {
	Input.driver = DriverInside
	Input.key = KeyInserted

	Input.key' = KeyInIgnitionOnPosition

	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}


----------------------------------------------------------------------------------------------------
fact init {
	Input.pitmanArm in PitmanArmNeutral
	Input.key in NoKeyInserted
     	Input.lightRotarySwitch in LightSwitchOff
	Input.ambientLightButton in AmbientLightButtonOff
	Input.driver in DriverOutside
	Input.wheel = SteeringWheelNeutral
	Car.gear = ForwardGear

	Signal in Off
	
	
     no ( Car.frontRight + Car.frontLeft +
	     Car.middleRight + Car.middleLeft +
	     Car.backRight + Car.backLeft +
	     Car.top )

}

fact lowBeamOnBasic {
	(Input.key = KeyInIgnitionOnPosition and Input.lightRotarySwitch = LightSwitchOn)
		implies LowBeamHeadLights in On
}

--Turn on the Low Beam Headlights at Half the power
pred activateHalfLowBeamHeadlights {
	Input.driver = DriverInside
	Input.key = KeyInserted
	Input.lightRotarySwitch = LightSwitchOn
	
 	Car.frontLeft' = Car.frontLeft + HalfLowBeamHeadLight 
	Car.frontRight' = Car.frontRight + HalfLowBeamHeadLight
	Car.backLeft' = Car.backLeft + TailLight
	Car.backRight' = Car.backRight + TailLight
	On' = On + LowBeamHeadLights
	Off' = Off - LowBeamHeadLights
	Signals.signals' = On'


	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Car.gear' = Car.gear
}

--Turn ON the Low Beam Headlights at full power
pred activateLowBeamHeadlights {
	Input.driver = DriverInside
	Input.key = KeyInserted
	Input.lightRotarySwitch = LightSwitchAuto
	Input.ambientLightButton = AmbientLightButtonOn
	
 	Car.frontLeft' = Car.frontLeft + LowBeamHeadLight
	Car.frontRight' = Car.frontRight + LowBeamHeadLight
	Car.backLeft' = Car.backLeft + TailLight
	Car.backRight' = Car.backRight + TailLight
	On' = On + LowBeamHeadLights
	Off' = Off - LowBeamHeadLights
	Signals.signals' = On'
	

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Car.gear' = Car.gear
}

--Turn OFF the Low Beam headlights
pred deactivateLowBeamHeadLights {
	Input.driver = DriverInside
	LowBeamHeadLight in Car.frontLeft
	LowBeamHeadLight in Car.frontRight

	Car.frontLeft' = 	Car.frontLeft - (HalfLowBeamHeadLight + LowBeamHeadLight)
	Car.frontRight' = Car.frontRight - (HalfLowBeamHeadLight + LowBeamHeadLight)
	Car.backLeft' = Car.backLeft - TailLight
	Car.backRight' = Car.backRight - TailLight
	On' = On - LowBeamHeadLights
	Off' = Off + LowBeamHeadLights
	Signals.signals' = On'

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Car.gear' = Car.gear
}

--This predicate ensures that Low Beam Headlights are turned OFF if the Light Rotary Switch is on AUTO
--position when the key is not on KeyInIgnitionOnPosition(Car turned OFF)
pred lowBeamOn_LightToAuto {
	Input.driver = DriverInside
	Input.key != KeyInIgnitionOnPosition
	Input.lightRotarySwitch = LightSwitchAuto
	
 	Car.frontLeft' = Car.frontLeft - (LowBeamHeadLight + HalfLowBeamHeadLight)
	Car.frontRight' = Car.frontRight  - (LowBeamHeadLight + HalfLowBeamHeadLight)
	Car.backLeft' = Car.backLeft - TailLight
	Car.backRight' = Car.backRight - TailLight
	On' = On - LowBeamHeadLights
	Off' = Off + LowBeamHeadLights
	Signals.signals' = On'

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Car.gear' = Car.gear
}

-- we need to "unlight it"
pred lightCorneringBySignal {
	LowBeamHeadLights in On
	TurnSignal in On
	Input.wheel = SteeringWheelLeft

	
	Car.frontLeft' = Car.frontLeft + CorneringLight
	Car.frontRight' = Car.frontRight + CorneringLight

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear
}

-- Activate reverse gears
pred reverseGears {
	Car.gear = ForwardGear
	Input.driver = DriverInside
	Input.key = KeyInIgnitionOnPosition

	Car.gear' = ReverseGear
	Car.backLeft' = Car.backLeft + ReverseLight
	Car.backRight' = Car.backRight + ReverseLight

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On + ReverseLights
	Off' = Off - ReverseLights
	Signals.signals' = On'
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' = Input.ambientLightButton
	
}

--Activate Forward Gear
pred forwardGears {
	Car.gear = ReverseGear
	Input.driver = DriverInside
	Input.key = KeyInIgnitionOnPosition

	Car.gear' = ForwardGear
	Car.backLeft' = Car.backLeft - ReverseLight
	Car.backRight' = Car.backRight - ReverseLight

	Input.key' = Input.key
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' = Input.ambientLightButton
	Input.pitmanArm' = Input.pitmanArm
	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	On' = On - ReverseLights
	Off' = Off + ReverseLights
	Signals.signals' = On'
	
	
	
}

fact alwaysAllAmbientLights {
	always (
		AmbientLight in (Car.frontRight + Car.middleRight + Car.backRight + Car.frontLeft + Car.middleLeft + Car.backLeft)
				implies AmbientLight in Car.frontRight and
						AmbientLight in Car.middleRight and
						AmbientLight in Car.backRight and
						AmbientLight in Car.frontLeft and
						AmbientLight in Car.middleLeft and
						AmbientLight in Car.backLeft
	)
}

--Turn the steering wheel left
pred turnLeft {
	Input.driver = DriverInside
	Input.wheel != SteeringWheelLeft
	
	Input.wheel' = SteeringWheelLeft

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
	Car.gear' = Car.gear
}

--Turn steering wheel right
pred turnRight {
	Input.driver = DriverInside
	Input.wheel != SteeringWheelRight
	
	Input.wheel' = SteeringWheelRight

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
	Car.gear' = Car.gear
}
--Steering wheel to Neutral position
pred turnNeutral {
	Input.driver = DriverInside
	Input.wheel != SteeringWheelNeutral
	
	Input.wheel' = SteeringWheelNeutral

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
	Car.gear' = Car.gear
}

--Turn on High Beam headlights
pred activateHighBeamHeadLights{

	Input.key != NoKeyInserted
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmForward
	Car.frontLeft' = Car.frontLeft + HighBeamHeadLight
	Car.frontRight' = Car.frontRight + HighBeamHeadLight
	Car.backLeft' = Car.backLeft + TailLight
	Car.backRight' = Car.backRight + TailLight
	On' = On + HighBeamHeadLights
	Off' = Off - HighBeamHeadLights
	Signals.signals' = On'

	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear

	
	
}

--Turn off High beam headlights
pred deactivateHighBeamHeadLights{

	Input.key != NoKeyInserted
	Input.driver = DriverInside
	Input.pitmanArm = PitmanArmForward

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontLeft' = Car.frontLeft - HighBeamHeadLight
	Car.frontRight' = Car.frontRight - HighBeamHeadLight
	Car.backLeft' = Car.backLeft - TailLight
	Car.backRight' = Car.backRight - TailLight
	On' = On - HighBeamHeadLights
	Off' = Off + HighBeamHeadLights
	Signals.signals' = On'

	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
	Car.gear' = Car.gear

	
	
}

fact transitions {
	always (
		tmpLeftBlinking or stopTmpLeftBlinking or leftBlinking or tmpRightBlinking or stopTmpRightBlinking or rightBlinking or 
		activateLowBeamHeadlights or deactivateLowBeamHeadLights or lowBeamOn_LightToAuto or activateHalfLowBeamHeadlights or
		activateAmbientLight or 
		insertKey or rotateKey or 
		leaveCar or enterCar or
		lightOn or lightOff or lightAuto or 
		ambientLightOn or ambientLightOff or reverseGears or
		turnRight or turnLeft or turnNeutral
		
	)	
}

-- to prevent "funny" traces
fact noRepeatTmpBlinkers {
	always (
	(Input.pitmanArm = PitmanArmUp5 implies Input.pitmanArm' != PitmanArmUp5)
	and
	(Input.pitmanArm = PitmanArmDown5 implies Input.pitmanArm' != PitmanArmDown5)
	)
}

-- we weren't quite sure what to assert
-- we had some difficulties choosing between what to put in facts and what to assert
-- "should our preds enforce the facts or should we be explicity about them?"

assert tmpFlashGoesOff {
	always (
	(Input.pitmanArm = PitmanArmUp5 or Input.pitmanArm = PitmanArmDown5)
		implies (BlinkerLights not in Signals.signals' or Input.pitmanArm' = PitmanArmUp7 or Input.pitmanArm' = PitmanArmDown7)
	)
}

assert lowBeanOnTest {
	always (
	(Input.key = KeyInIgnitionOnPosition and Input.lightRotarySwitch = LightSwitchOn)
		implies LowBeamHeadLights in On
	)
}

assert highBeamTail {
	always (
	HighBeamHeadLights in Signals.signals implies TailLight in Car.backLeft
	)
}

run {} for 50
check tmpFlashGoesOff
check lowBeanOnTest -- fails
check highBeamTail
