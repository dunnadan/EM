abstract sig Signal {}
one sig TurnSignal extends Signal {}
one sig EmergencyBreakLight extends Signal {}
one sig AdaptiveHighBeam extends Signal {}
one sig LowBeamHeadlights extends Signal {}
one sig CorneringLights extends Signal {}

-- done this way instead of lone sing xSignal extends Signal {}
-- to appear the same name in the model
-- same expressive power, better visual mode, little extra boilerplate
var sig On in Signal {} 
var sig Off in Signal {}
fact oneModeSignal { 
	always (
 		Signal = On + Off and
		no On & Off
	)
}


abstract sig Light {}
one sig Blinker extends Light {}
one sig LowBeamHeadLight extends Light {}
one sig HighBeamHeadLight extends Light {}
one sig CorneringLight extends Light {}
one sig BrakeLight extends Light {}
one sig TailLight extends Light {}
one sig ReverseLight extends Light {}
one sig AmbientLight extends Light {}


one sig Car {
	var frontRight: set Light,
	var frontLeft: set Light,
	var middleLeft: lone Light,
	var middleRight: lone Light,
	var backRight: set Light,
	var backLeft: set Light,
	var top: lone BrakeLight
}


fact notAllowedInFront {
	let front = Car.frontRight + Car.frontLeft {
		always (
			BrakeLight not in front and
			TailLight not in front and
			ReverseLight not in front
		)
	}
}

fact notAllowedInMiddle {
	let middle = Car.middleRight + Car.middleLeft {
		always (
			LowBeamHeadLight not in middle and
			HighBeamHeadLight not in middle and
			CorneringLight not in middle and
			BrakeLight not in middle and
			TailLight not in middle and
			ReverseLight not in middle
		)
	}
}

fact notAllowedInBack {
	let back = Car.backRight + Car.backLeft {
		always (
			LowBeamHeadLight not in back and
			HighBeamHeadLight not in back and
			CorneringLight not in back
		)
	}
}


fact alwaysBlinkAllLights {
	always (
		Blinker in (Car.frontRight + Car.middleRight + Car.backRight)
				implies Blinker in Car.frontRight and
						Blinker in Car.middleRight and
						Blinker in Car.backRight
	)
	always (
		Blinker in (Car.frontLeft + Car.middleLeft + Car.backLeft)
				implies Blinker in Car.frontLeft and
						Blinker in Car.middleLeft and
						Blinker in Car.backLeft
	)
}

fact onlyOneBlinker {
	always (
		Blinker in Car.middleRight implies Blinker not in Car.middleLeft
	)
	always (
		Blinker in Car.middleLeft implies Blinker not in Car.middleRight
	)
}

-- confirm this
-- do the same for lbh and hbh
fact alwaysBrakeAllBackLights {
	always (
		BrakeLight in (Car.backRight + Car.backLeft)
				implies BrakeLight in Car.backRight and
						BrakeLight in Car.backLeft
	)
}


one sig Input {
	var key: one Key,
	var pitmanArm: one PitmanArm,
	var lightRotarySwitch: one LightRotarySwitch,
	var ambientLightButton: one AmbientLightButton,
	var driver: one Driver
}

abstract sig PitmanArm {
 -- 5ยบ/7ยบ could be done with a relation here
 -- but some since ยบ doesn't matter for left and right
 -- that would allow to represent "impossible" states
 -- hence this solution
}
one sig PitmanArmNeutral extends PitmanArm {}
one sig PitmanArmUp5 extends PitmanArm {}
one sig PitmanArmUp7 extends PitmanArm {}
one sig PitmanArmDown5 extends PitmanArm {}
one sig PitmanArmDown7 extends PitmanArm {}
one sig PitmanArmForward extends PitmanArm {}
one sig PitmanArmBackward extends PitmanArm {}

abstract sig Key {}
one sig NoKeyInserted extends Key {}
one sig KeyInserted extends Key {}
one sig KeyInIgnitionOnPosition extends Key {}

abstract sig LightRotarySwitch {}
one sig LightSwitchOff extends LightRotarySwitch {}
one sig LightSwitchOn extends LightRotarySwitch {} 
one sig LightSwitchAuto extends LightRotarySwitch {} 

abstract sig AmbientLightButton {}
one sig AmbientLightButtonOn extends AmbientLightButton{}
one sig AmbientLightButtonOff extends AmbientLightButton{}

abstract sig Driver {}
one sig DriverInside extends Driver {}
one sig DriverOutside extends Driver {} 

one sig Signals {
	var signals: set On
}

pred keys {
	insertKey or rotateKey
}

pred insertKey {
	Input.key = NoKeyInserted
	
	Input.key' = KeyInserted

 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
}

pred rotateKey {
	Input.key = KeyInserted

	Input.key' = KeyInIgnitionOnPosition

	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
}

fact init {
	Input.pitmanArm in PitmanArmNeutral
	Input.key in NoKeyInserted
     	Input.lightRotarySwitch in LightSwitchOff
	Input.ambientLightButton in AmbientLightButtonOff
	Input.driver in DriverInside

	Signal in Off
	
	
     no ( Car.frontRight + Car.frontLeft +
	     Car.middleRight + Car.middleLeft +
	     Car.backRight + Car.backLeft +
	     Car.top )

}

pred do_nothing {
	Input.pitmanArm' = Input.pitmanArm
	Car.frontLeft' = Car.frontLeft 
	Car.middleLeft' = Car.middleLeft 
	Car.backLeft' = Car.backLeft 
	On' = On
	Off' = Off
	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     
}

fact transitions {
	always (
		activateAmbientLight or keys or leaveCar or enterCar or
		directionBlinking
	)	
}





pred directionBlinking {
	Input.key = KeyInIgnitionOnPosition
	(tmpLeftBlinking or stopTmpLeftBlinking or leftBlinking or
      tmpRightBlinking or stopTmpRightBlinking or rightBlinking)
}


pred tmpRightBlinking {

	Input.pitmanArm' = PitmanArmUp5
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker

	Blinker not in Car.frontRight'' 
	Blinker not in Car.middleRight''
	Blinker not in Car.backRight''
	
	-- post condition
	On' = On
	Off' = Off
	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     
}

pred stopTmpRightBlinking {
	Input.pitmanArm = PitmanArmUp5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontRight' = Car.frontRight - Blinker
	Car.middleRight' = Car.middleRight - Blinker
	Car.backRight' = Car.backRight - Blinker

	On' = On
	Off' = Off
	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
}

pred rightBlinking {
	Input.pitmanArm' = PitmanArmUp7

	
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker
	
	-- post condition
	On' = On
	Off' = Off
	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     
}

pred tmpLeftBlinking {

	Input.pitmanArm' = PitmanArmDown5
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker

	Blinker not in Car.frontLeft'' 
	Blinker not in Car.middleLeft''
	Blinker not in Car.backLeft''
	
	-- post condition
	On' = On
	Off' = Off
	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     
}

pred stopTmpLeftBlinking {
	Input.pitmanArm = PitmanArmDown5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontLeft' = Car.frontLeft - Blinker
	Car.middleLeft' = Car.middleLeft - Blinker
	Car.backLeft' = Car.backLeft - Blinker

	On' = On
	Off' = Off
	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
}

pred leftBlinking {
	Input.pitmanArm' = PitmanArmDown7

	
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker
	
	-- post condition
	On' = On
	Off' = Off
	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     
}


run {} for 50

pred enterCar {
	Input.driver = DriverOutside
	
     Input.key' = KeyInserted
	Input.driver' = DriverInside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')
	
	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton
}


pred leaveCar {
	Input.driver = DriverInside
	
     Input.key' = KeyInserted
	Input.driver' = DriverOutside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')
	
	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton

}


pred activateAmbientLight {
	--pre
	Input.key = KeyInserted
	Input.ambientLightButton = AmbientLightButtonOn
	Input.driver = DriverOutside
	
	--post
	Car.frontLeft' in AmbientLight
	Car.frontRight' in AmbientLight
	Car.middleLeft' in AmbientLight
	Car.middleRight' in AmbientLight
	Car.backLeft' in AmbientLight
	Car.backRight' in AmbientLight


	--frame
	On' = On
	Off' = Off
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.key' = Input.key
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.driver' = Input.driver

}

