abstract sig Signal {}
one sig TurnSignal extends Signal {}
one sig EmergencyBreakLight extends Signal {}
one sig AdaptiveHighBeam extends Signal {}
one sig LowBeamHeadLights extends Signal {}
one sig CorneringLights extends Signal {}
one sig BlinkerLights extends Signal {}

-- done this way instead of lone sing xSignal extends Signal {}
-- to appear the same name in the model
-- same expressive power, better visual mode, little extra boilerplate
var sig On in Signal {} 
var sig Off in Signal {}
fact oneModeSignal { 
	always (
 		Signal = On + Off and
		no On & Off
	)
}

one sig Signals {
	var signals: set On
}
----------------------------------------------------------------------------------------------------

abstract sig Light {}
one sig Blinker extends Light {}
one sig LowBeamHeadLight extends Light {}
one sig HalfLowBeamHeadLight extends Light {}
one sig HighBeamHeadLight extends Light {}
one sig CorneringLight extends Light {}
one sig BrakeLight extends Light {}
one sig TailLight extends Light {}
one sig ReverseLight extends Light {}
one sig AmbientLight extends Light {}


one sig Car {
	var frontRight: set Light,
	var frontLeft: set Light,
	var middleLeft: lone Light,
	var middleRight: lone Light,
	var backRight: set Light,
	var backLeft: set Light,
	var top: lone BrakeLight
}


fact notAllowedInFront {
	let front = Car.frontRight + Car.frontLeft {
		always (
			BrakeLight not in front and
			TailLight not in front and
			ReverseLight not in front
		)
	}
}

fact notAllowedInMiddle {
	let middle = Car.middleRight + Car.middleLeft {
		always (
			LowBeamHeadLight not in middle and
			HighBeamHeadLight not in middle and
			CorneringLight not in middle and
			BrakeLight not in middle and
			TailLight not in middle and
			ReverseLight not in middle
		)
	}
}

fact notAllowedInBack {
	let back = Car.backRight + Car.backLeft {
		always (
			LowBeamHeadLight not in back and
			HighBeamHeadLight not in back and
			CorneringLight not in back
		)
	}
}


fact alwaysBlinkAllLights {
	always (
		Blinker in (Car.frontRight + Car.middleRight + Car.backRight)
				implies Blinker in Car.frontRight and
						Blinker in Car.middleRight and
						Blinker in Car.backRight
	)
	always (
		Blinker in (Car.frontLeft + Car.middleLeft + Car.backLeft)
				implies Blinker in Car.frontLeft and
						Blinker in Car.middleLeft and
						Blinker in Car.backLeft
	)
}

fact onlyOneBlinker {
	always (
		Blinker in Car.middleRight implies Blinker not in Car.middleLeft
	)
	always (
		Blinker in Car.middleLeft implies Blinker not in Car.middleRight
	)
}

-- confirm this
-- do the same for lbh and hbh
fact alwaysBrakeAllBackLights {
	always (
		BrakeLight in (Car.backRight + Car.backLeft)
				implies BrakeLight in Car.backRight and
						BrakeLight in Car.backLeft
	)
}
----------------------------------------------------------------------------------------------------

one sig Input {
	var key: one Key,
	var pitmanArm: one PitmanArm,
	var lightRotarySwitch: one LightRotarySwitch,
	var ambientLightButton: one AmbientLightButton,
	var driver: one Driver,
	var wheel: one SteeringWheel 
}

abstract sig PitmanArm {
 -- 5ยบ/7ยบ could be done with a relation here
 -- but some since ยบ doesn't matter for left and right
 -- that would allow to represent "impossible" states
 -- hence this solution
}
one sig PitmanArmNeutral extends PitmanArm {}
one sig PitmanArmUp5 extends PitmanArm {}
one sig PitmanArmUp7 extends PitmanArm {}
one sig PitmanArmDown5 extends PitmanArm {}
one sig PitmanArmDown7 extends PitmanArm {}
one sig PitmanArmForward extends PitmanArm {}
one sig PitmanArmBackward extends PitmanArm {}

abstract sig Key {}
one sig NoKeyInserted extends Key {}
one sig KeyInserted extends Key {}
one sig KeyInIgnitionOnPosition extends Key {}

abstract sig LightRotarySwitch {}
one sig LightSwitchOff extends LightRotarySwitch {}
one sig LightSwitchOn extends LightRotarySwitch {} 
one sig LightSwitchAuto extends LightRotarySwitch {} 

abstract sig AmbientLightButton {}
one sig AmbientLightButtonOn extends AmbientLightButton{}
one sig AmbientLightButtonOff extends AmbientLightButton{}

abstract sig Driver {}
one sig DriverInside extends Driver {}
one sig DriverOutside extends Driver {}

abstract sig SteeringWheel {}
one sig SteeringWheelNeutral extends SteeringWheel {}
one sig SteeringWheelLeft extends SteeringWheel {}
one sig SteeringWheelRight extends SteeringWheel {}
 
----------------------------------------------------------------------------------------------------



----------------------------------------------------------------------------------------------------
pred tmpRightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmUp5
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Blinker not in Car.frontRight'' 
	Blinker not in Car.middleRight''
	Blinker not in Car.backRight''
	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
     
}

pred stopTmpRightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside
	Input.pitmanArm = PitmanArmUp5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontRight' = Car.frontRight - Blinker
	Car.middleRight' = Car.middleRight - Blinker
	Car.backRight' = Car.backRight - Blinker
	Off' = Off + BlinkerLights
	On' = On - BlinkerLights
	Signals.signals' = On'

	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}

pred rightBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmUp7
	Car.frontRight' = Car.frontRight + Blinker
	Car.middleRight' = Car.middleRight + Blinker
	Car.backRight' = Car.backRight + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Car.frontLeft' = Car.frontLeft
	Car.middleLeft' = Car.middleLeft
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
     
}

pred tmpLeftBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmDown5
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Blinker not in Car.frontLeft'' 
	Blinker not in Car.middleLeft''
	Blinker not in Car.backLeft''
	

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
     	Input.wheel' = Input.wheel
}

pred stopTmpLeftBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm = PitmanArmDown5

	Input.pitmanArm' = PitmanArmNeutral
	Car.frontLeft' = Car.frontLeft - Blinker
	Car.middleLeft' = Car.middleLeft - Blinker
	Car.backLeft' = Car.backLeft - Blinker
	Off' = Off + BlinkerLights
	On' = On - BlinkerLights
	Signals.signals' = On'

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}

pred leftBlinking {
	Input.key = KeyInIgnitionOnPosition
	Input.driver = DriverInside

	Input.pitmanArm' = PitmanArmDown7
	Car.frontLeft' = Car.frontLeft + Blinker
	Car.middleLeft' = Car.middleLeft + Blinker
	Car.backLeft' = Car.backLeft + Blinker
	On' = On + BlinkerLights
	Off' = Off - BlinkerLights
	Signals.signals' = On'

	Car.frontRight' = Car.frontRight
	Car.middleRight' = Car.middleRight
	Car.backRight' = Car.backRight
	Car.top' = Car.top
	Input.key' = Input.key
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
     
}

pred lightOn {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchOn

	Input.lightRotarySwitch' = LightSwitchOn
	
	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}
pred lightOff {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchOff

	Input.lightRotarySwitch' = LightSwitchOff

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}
pred lightAuto {
	Input.driver = DriverInside
	Input.lightRotarySwitch != LightSwitchAuto

	Input.lightRotarySwitch' = LightSwitchAuto

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}

pred ambientLightOn {
	Input.driver = DriverInside
	Input.ambientLightButton = AmbientLightButtonOff

	Input.ambientLightButton' = AmbientLightButtonOn

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.wheel' = Input.wheel
}

pred ambientLightOff {
	Input.driver = DriverInside
	Input.ambientLightButton = AmbientLightButtonOn

	Input.ambientLightButton' = AmbientLightButtonOff

	Input.key' = Input.key
 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.wheel' = Input.wheel
}

pred enterCar {
	Input.driver = DriverOutside
	
     Input.key' = KeyInserted
	Input.driver' = DriverInside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')
	
	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.wheel' = Input.wheel
}

pred leaveCar {
	Input.driver = DriverInside
     
	Input.key' = KeyInserted
	Input.driver' = DriverOutside
	no (Car.frontLeft' + Car.frontRight' + Car.middleLeft' +
	    Car.middleRight' + Car.backLeft' + Car.backRight' + Car.top')
--	(Input.key = KeyInserted and Input.ambientLightButton = AmbientLightButtonOn) implies	--test, verify this
--		activateAmbientLight												--test, verify this


	On' = On
	Off' = Off
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.wheel' = Input.wheel
}


pred activateAmbientLight {
	--pre
	Input.key = KeyInserted
	Input.ambientLightButton = AmbientLightButtonOn
	Input.driver = DriverOutside
	AmbientLight not in Car.middleRight
	
	--post
	Car.frontLeft' = AmbientLight
	Car.frontRight' = AmbientLight
	Car.middleLeft' = AmbientLight
	Car.middleRight' = AmbientLight
	Car.backLeft' = AmbientLight
	Car.backRight' = AmbientLight


	--frame
	On' = On
	Off' = Off
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.key' = Input.key
	Input.ambientLightButton' =	 Input.ambientLightButton
	Input.driver' = Input.driver
	Input.wheel' = Input.wheel
}

pred insertKey {
	Input.driver = DriverInside
	Input.key = NoKeyInserted
	
	Input.key' = KeyInserted

 	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}

pred rotateKey {
	Input.driver = DriverInside
	Input.key = KeyInserted

	Input.key' = KeyInIgnitionOnPosition

	Car.frontRight' = Car.frontRight
	Car.frontLeft' = Car.frontLeft
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.backRight' = Car.backRight
	Car.backLeft' = Car.backLeft
	Car.top' = Car.top
	Input.pitmanArm' = Input.pitmanArm
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	On' = On
	Off' = Off
	Input.driver' = Input.driver
	Input.ambientLightButton' = Input.ambientLightButton
	Input.wheel' = Input.wheel
}


----------------------------------------------------------------------------------------------------
fact init {
	Input.pitmanArm in PitmanArmNeutral
	Input.key in NoKeyInserted
     	Input.lightRotarySwitch in LightSwitchOff
	Input.ambientLightButton in AmbientLightButtonOff
	Input.driver in DriverOutside
	Input.wheel = SteeringWheelNeutral

	Signal in Off
	
	
     no ( Car.frontRight + Car.frontLeft +
	     Car.middleRight + Car.middleLeft +
	     Car.backRight + Car.backLeft +
	     Car.top )

}

fact lowBeamOnBasic {
	(Input.key = KeyInIgnitionOnPosition and Input.lightRotarySwitch = LightSwitchOn)
		implies LowBeamHeadLights in On
}

pred activateHalfLowBeamHeadlights {
	Input.driver = DriverInside
	Input.key = KeyInserted
	Input.lightRotarySwitch = LightSwitchOn
	
 	Car.frontLeft' = Car.frontLeft + HalfLowBeamHeadLight 
	Car.frontRight' = Car.frontRight + HalfLowBeamHeadLight
	Car.backLeft' = Car.backLeft + TailLight
	Car.backRight' = Car.backRight + TailLight
	On' = On + LowBeamHeadLights
	Off' = Off - LowBeamHeadLights


	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
}

pred activateLowBeamHeadlights {
	Input.driver = DriverInside
	Input.key = KeyInserted
	Input.lightRotarySwitch = LightSwitchAuto
	Input.ambientLightButton = AmbientLightButtonOn
	
 	Car.frontLeft' = Car.frontLeft + LowBeamHeadLight
	Car.frontRight' = Car.frontRight + LowBeamHeadLight
	Car.backLeft' = Car.backLeft + TailLight
	Car.backRight' = Car.backRight + TailLight
	On' = On + LowBeamHeadLights
	Off' = Off - LowBeamHeadLights
	

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
}

pred deactivateLowBeamHeadLights {
	Input.driver = DriverInside
	LowBeamHeadLight in Car.frontLeft
	LowBeamHeadLight in Car.frontRight

	Car.frontLeft' = 	Car.frontLeft - (HalfLowBeamHeadLight + LowBeamHeadLight)
	Car.frontRight' = Car.frontRight - (HalfLowBeamHeadLight + LowBeamHeadLight)
	Car.backLeft' = Car.backLeft - TailLight
	Car.backRight' = Car.backRight - TailLight
	On' = On - LowBeamHeadLights
	Off' = Off + LowBeamHeadLights

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
}

pred lowBeamOn_LightToAuto {
	Input.driver = DriverInside
	Input.key != KeyInIgnitionOnPosition
	Input.lightRotarySwitch = LightSwitchAuto
	
 	Car.frontLeft' = Car.frontLeft - (LowBeamHeadLight + HalfLowBeamHeadLight)
	Car.frontRight' = Car.frontRight  - (LowBeamHeadLight + HalfLowBeamHeadLight)
	Car.backLeft' = Car.backLeft - TailLight
	Car.backRight' = Car.backRight - TailLight
	On' = On - LowBeamHeadLights
	Off' = Off + LowBeamHeadLights

	Car.middleLeft' = Car.middleLeft
	Car.middleRight' = Car.middleRight
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
}

/*
--nao consigo chegar a um estado em que teste isto
fact els16 {

	Input.key != KeyInIgnitionOnPosition and Input.lightRotarySwitch = LightSwitchAuto implies
		deactivateLowBeamHeadLights
		
}
*/


fact alwaysAllAmbientLights {
	always (
		AmbientLight in (Car.frontRight + Car.middleRight + Car.backRight + Car.frontLeft + Car.middleLeft + Car.backLeft)
				implies AmbientLight in Car.frontRight and
						AmbientLight in Car.middleRight and
						AmbientLight in Car.backRight and
						AmbientLight in Car.frontLeft and
						AmbientLight in Car.middleLeft and
						AmbientLight in Car.backLeft
	)
}


pred turnLeft {
	Input.wheel != SteeringWheelLeft
	
	Input.wheel' = SteeringWheelLeft

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
}

pred turnRight {
	Input.wheel != SteeringWheelRight
	
	Input.wheel' = SteeringWheelRight

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
}

pred turnNeutral {
	Input.wheel != SteeringWheelNeutral
	
	Input.wheel' = SteeringWheelNeutral

	Car.frontLeft' = Car.frontLeft
	Car.frontRight' = Car.frontRight
	Car.backLeft' = Car.backLeft
	Car.backRight' = Car.backRight
	Car.middleRight' = Car.middleRight
	Car.middleLeft' = Car.middleLeft
	Car.top' = Car.top
	Input.lightRotarySwitch' = Input.lightRotarySwitch
	Input.pitmanArm' = Input.pitmanArm
	Input.key' = Input.key
	Input.ambientLightButton' = Input.ambientLightButton
	Input.driver' = Input.driver
	Off' = Off
	On' = On
}

fact transitions {
	always (
		tmpLeftBlinking or stopTmpLeftBlinking or leftBlinking or tmpRightBlinking or stopTmpRightBlinking or rightBlinking or 
		activateLowBeamHeadlights or deactivateLowBeamHeadLights or lowBeamOn_LightToAuto or activateHalfLowBeamHeadlights or
		activateAmbientLight or 
		insertKey or rotateKey or 
		leaveCar or enterCar or
		lightOn or lightOff or lightAuto or 
		ambientLightOn or ambientLightOff or
		turnRight or turnLeft or turnNeutral
	)	
}

run {} for 50
